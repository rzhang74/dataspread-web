<?xml version="1.0" encoding="UTF-8"?>
<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk>
	<window id="mainWin" hflex="1" vflex="1" apply="org.zkoss.zss.app.ui.AppCtrl">
		<vlayout hflex="1" vflex="1" spacing="0">
			<include hflex="1" src="~./zssapp/mainMenubar.zul" />
			<hlayout vflex="1" spacing="0">
				<vlayout>
					<div id="navs" width="400px" align="center" style="padding-bottom: 0;" visible="false">
						<label multiline="true" style="font-size: 24px; font-weight: bold">
							<attribute name="value">	Navigation
								Panel
							</attribute>
						</label>
						Organize By: <selectbox id="colSelectbox">
							<template name="model">
								<label value="${each}" />
							</template>
						</selectbox>
						<html>

							<![CDATA[
								<script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
								<div id="viz"></div>
								<script type="text/javascript">
									var margin = {top: 20, right: 0, bottom: 30, left: 20},
										width = 400 - margin.left - margin.right,
										barHeight = 20,
										barWidth = width * .8;

									var i = 0,
										duration = 400,
										root;

									var tree = d3.layout.tree()
										.nodeSize([0, 20]);

									var diagonal = d3.svg.diagonal()
										.projection(function(d) { return [d.y, d.x]; });

									var svg = d3.select("#viz").append("svg:svg")
										.attr("width", width + margin.left + margin.right)
										.attr("transform", "translate(" + 0 + "," + 0 + ")")
										.style("position","absolute")
									  .append("g")
										.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

									function display(model){
										console.log(model);
										d3.json(model, function(error, flare) {
											  if (error) throw error;
											  flare.x0 = 0;
											  flare.y0 = 0;
											  root = flare;
											  root.children.forEach(collapse);
											  update(root);
											  click(root);
											});
									}

									function update(source) {

									  // Compute the flattened node list. TODO use d3.layout.hierarchy.
									  var nodes = tree.nodes(root);

									  var height = Math.max(500, nodes.length * barHeight + margin.top + margin.bottom);

									  d3.select("svg").transition()
										  .duration(duration)
										  .attr("height", height);

									  d3.select(self.frameElement).transition()
										  .duration(duration)
										  .style("height", height + "px");

									  // Compute the "layout".
									  nodes.forEach(function(n, i) {
										n.x = i * barHeight;
									  });

									  // Update the nodes…
									  var node = svg.selectAll("g.node")
										  .data(nodes, function(d) { return d.id || (d.id = ++i); });

									  var nodeEnter = node.enter().append("g")
										  .attr("class", "node")
										  .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
										  .style("opacity", 1e-6);

									  // Enter any new nodes at the parent's previous position.
									  nodeEnter.append("rect")
										  .attr("y", -barHeight / 2)
										  .attr("height", barHeight)
										  .attr("width", barWidth)
										  .style("fill", color)
										  .on("click", function(d){
											  //add functions here
											  var range = d.rowRange.split('---');
											  var sta = +range[0];
											  var end = +range[1];
											  showBar(sta,end);
											  if (end - sta > 500) end = sta + 500;
											  loadData(sta,end,0,4);
											  click(d);
										  });

									  nodeEnter.append("text")
										  .attr("dy", 3.5)
										  .attr("dx", 5.5)
										  .text(function(d) { return d.name + " size: " + d.size + "  row-range: " + d.rowRange; });

									  // Transition nodes to their new position.
									  nodeEnter.transition()
										  .duration(duration)
										  .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
										  .style("opacity", 1);

									  node.transition()
										  .duration(duration)
										  .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
										  .style("opacity", 1)
										.select("rect")
										  .style("fill", color);

									  // Transition exiting nodes to the parent's new position.
									  node.exit().transition()
										  .duration(duration)
										  .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
										  .style("opacity", 1e-6)
										  .remove();

									  // Update the links…
									  var link = svg.selectAll("path.link")
										  .data(tree.links(nodes), function(d) { return d.target.id; });

									  // Enter any new links at the parent's previous position.
									  link.enter().insert("path", "g")
										  .attr("class", "link")
										  .attr("d", function(d) {
											var o = {x: source.x0, y: source.y0};
											return diagonal({source: o, target: o});
										  })
										.transition()
										  .duration(duration)
										  .attr("d", diagonal);

									  // Transition links to their new position.
									  link.transition()
										  .duration(duration)
										  .attr("d", diagonal);

									  // Transition exiting nodes to the parent's new position.
									  link.exit().transition()
										  .duration(duration)
										  .attr("d", function(d) {
											var o = {x: source.x, y: source.y};
											return diagonal({source: o, target: o});
										  })
										  .remove();

									  // Stash the old positions for transition.
									  nodes.forEach(function(d) {
										d.x0 = d.x;
										d.y0 = d.y;
									  });
									}

									// Toggle children on click.
									function click(d) {
									  if (d.children) {
										d._children = d.children;
										d.children = null;
									  } else {
										d.children = d._children;
										d._children = null;
									  }
									  update(d);
									}

									function collapse(d) {
										if (d.children) {
											d._children = d.children;
											d._children.forEach(collapse);
											d.children = null;
										}
									}

									function color(d) {
									  return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
									}
								</script>
							]]>

						</html>
					</div>

<!--<include vflex="1" src="~./zssapp/hierarchy.zul"></include>-->
				</vlayout>
                <spreadsheet id="ss" hflex="1" showToolbar="true" showFormulabar="true" showSheetbar="true"
							 showContextMenu="true" vflex="1"/>
			</hlayout>
		</vlayout>

		<script id="confirmMsgWorkaround"><![CDATA[
			(function(){
				var fn = 'onunload',
					orgFunc2 = window[fn];
				window[fn] = function (e) {
					zk.unloading = true;
					if(orgFunc2)
						orgFunc2.apply(this, arguments);
				    var bRmDesktop = !zk.opera && !zk.keepDesktop;
					if (bRmDesktop || zk.pfmeter) {
						try {
							var dts = zk.Desktop.all;
							for (var dtid in dts) {
								zAu._rmDesktop(dts[dtid], !bRmDesktop);
							}
						} catch (e) { //silent
						}
					}
				};
			})();
		]]></script>
		<script id="gaScript" ><![CDATA[
			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new
			Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
			})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
	
			ga('create', 'UA-85391072-1', 'auto');
			ga('require', 'displayfeatures');
			ga('send', 'pageview', {
				'page': location.pathname + location.search  + location.hash
			});
		]]></script>
	    <popup id="usersPop" width="115px">
            <html id="usersPopContent">
            </html>
        </popup>
	</window>
</zk>