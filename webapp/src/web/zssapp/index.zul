<?xml version="1.0" encoding="UTF-8"?>
<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk>
	<window id="mainWin" hflex="1" vflex="1" apply="org.zkoss.zss.app.ui.AppCtrl">
		<vlayout hflex="1" vflex="1" spacing="0">
			<include hflex="1" src="~./zssapp/mainMenubar.zul" />
			<hlayout vflex="1" spacing="0">
				<vlayout>
					<div id="navs" width="400px" align="center" style="padding-bottom: 0;" visible="false">
						<label multiline="true" style="font-size: 24px; font-weight: bold">
							<attribute name="value">	Navigation
								Panel
							</attribute>
						</label>
						Organize By: <selectbox id="colSelectbox">
							<template name="model">
								<label value="${each}" />
							</template>
						</selectbox>

						<html>

							<![CDATA[
								<script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
								<div id="viz" style="overflow:auto;width:400px;height:500px;"></div>

								<script type="text/javascript">

									var margin = {top: 20, right: 0, bottom: 30, left: 20},
										width = 400 - margin.left - margin.right,
										height = 500 - margin.top - margin.bottom,
										formatNumber = d3.format(",%"),
										colorDomain = [-.6, 0, .6],
										colorRange = ["#373a93", 'white', "#936638"],
										transitioning;

									// sets x and y scale to determine size of visible boxes
									var x = d3.scale.linear()
										.domain([0, width])
										.range([0, width]);

									var y = d3.scale.linear()
										.domain([0, height])
										.range([0, height]);

									// adding a color scale
									var color = d3.scale.linear()
										.domain(colorDomain)
										.range(colorRange);

									// introduce color scale here

									var treemap = d3.layout.treemap()
										.children(function(d, depth) { return depth ? null : d.children; })
										.sort(function(a, b) { return a.size - b.size; })
										.ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
										.value(function(d) { return d.size; })
										.round(false);

									var svg = d3.select("#viz").append("svg")
												.attr("width", width + margin.left + margin.right)
												.attr("height", height + margin.bottom + margin.top)
												.style("margin-left", -margin.left + "px")
												.style("margin.right", -margin.right + "px")
											  .append("g")
												.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
												.style("shape-rendering", "crispEdges");

									var grandparent = svg.append("g")
										.attr("class", "grandparent");

									grandparent.append("rect")
										.attr("y", -margin.top)
										.attr("width", width)
										.attr("height", margin.top);

									grandparent.append("text")
										.attr("x", 6)
										.attr("y", 6 - margin.top)
										.attr("dy", ".75em");



								    // functions

									   // Compute the treemap layout recursively such that each group of siblings
									  // uses the same size (1×1) rather than the dimensions of the parent cell.
									  // This optimizes the layout for the current zoom state. Note that a wrapper
									  // object is created for the parent node for each group of siblings so that
									  // the parent’s dimensions are not discarded as we recurse. Since each group
									  // of sibling was laid out in 1×1, we must rescale to fit using absolute
									  // coordinates. This lets us use a viewport to zoom.
									  function layout(d) {
										if (d.children) {
										  // treemap nodes comes from the treemap set of functions as part of d3
										  treemap.nodes({children: d.children});
										  d.children.forEach(function(c) {
											c.x = d.x + c.x * d.dx;
											c.y = d.y + c.y * d.dy;
											c.dx *= d.dx;
											c.dy *= d.dy;
											c.parent = d;
											// recursion
											layout(c);
										  });
										}
									  }

									function colorIncrements(d){
										return (colorDomain[colorDomain.length - 1] - colorDomain[0])/18*d + colorDomain[0];
									}


									// determines if white or black will be better contrasting color
									function getContrast50(hexcolor){
										return (parseInt(hexcolor.replace('#', ''), 16) > 0xffffff/3) ? 'black':'white';
									}

									function show(d) {
										console.log(d);
										grandparent
											.datum(d.parent)
											.on("click", transition)
										  .select("text")
											.text(name(d))

										// color header based on grandparent's rate
										grandparent
										  .datum(d.parent)
										  .select("rect")
										  .attr("fill", function(){console.log(color(-0.2)); return color(-0.2)})

										var g1 = svg.insert("g", ".grandparent")
											.datum(d)
											.attr("class", "depth");

										var g = g1.selectAll("g")
											.data(d.children)
										  .enter().append("g");

										g.filter(function(d) { return d.children; })
											.classed("children", true)
											.on("click", transition);

										g.selectAll(".child")
											.data(function(d) { return d.children || [d]; })
										  .enter().append("rect")
											.attr("class", "child")
											.call(rect);

										g.append("rect")
											.attr("class", "parent")
											.call(rect)
										  .append("title")
											.text(function(d) {console.log(typeof(d.size), d.size); return d.name + ', Cases of TB: ' + d.size; });

										g.append("text")
											.attr("dy", ".75em")
											.text(function(d) { return d.name; })
											.call(text);

										function transition(d) {
										  if (transitioning || !d) return;
										  transitioning = true;

										  var g2 = show(d),
											  t1 = g1.transition().duration(750),
											  t2 = g2.transition().duration(750);

										  // Update the domain only after entering new elements.
										  x.domain([d.x, d.x + d.dx]);
										  y.domain([d.y, d.y + d.dy]);

										  // Enable anti-aliasing during the transition.
										  svg.style("shape-rendering", null);

										  // Draw child nodes on top of parent nodes.
										  svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

										  // Fade-in entering text.
										  g2.selectAll("text").style("fill-opacity", 0);

										  // Transition to the new view.
										  t1.selectAll("text").call(text).style("fill-opacity", 0);
										  t2.selectAll("text").call(text).style("fill-opacity", 1);
										  t1.selectAll("rect").call(rect);
										  t2.selectAll("rect").call(rect);

										  // Remove the old node when the transition is finished.
										  t1.remove().each("end", function() {
											svg.style("shape-rendering", "crispEdges");
											transitioning = false;
										  });
										}

										return g;
									  }

									  function text(text) {
										text.attr("x", function(d) { return x(d.x) + 6; })
											.attr("y", function(d) { return y(d.y) + 6; })
											.attr("fill", function (d) {return getContrast50(color(parseFloat(-0,2)))});
									  }

									  function rect(rect) {
										rect.attr("x", function(d) { return x(d.x); })
											.attr("y", function(d) { return y(d.y); })
											.attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
											.attr("height", function(d) { return y(d.y + d.dy) - y(d.y); })
											.attr("fill", function(d){return color(parseFloat(-0.2));});
									  }

									  function name(d) {
										return d.parent
											? name(d.parent) + "." + d.name
											: d.name;
									  }

									function display(model){

										d3.select("svg").remove();
										treemap = d3.layout.treemap()
										.children(function(d, depth) { return depth ? null : d.children; })
										.sort(function(a, b) { return a.size - b.size; })
										.ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
										.value(function(d) { return d.size; })
										.round(false);

										svg = d3.select("#viz").append("svg")
												.attr("width", width + margin.left + margin.right)
												.attr("height", height + margin.bottom + margin.top)
												.style("margin-left", -margin.left + "px")
												.style("margin.right", -margin.right + "px")
											  .append("g")
												.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
												.style("shape-rendering", "crispEdges");
										root = JSON.parse(model);
										root.x = root.y = 0;
										root.dx = width;
										root.dy = height;
										root.depth = 0;
										layout(root);
										show(root);
									}
								</script>
							]]>

						</html>
					</div>
<!--<include vflex="1" src="~./zssapp/hierarchy.zul"></include>-->
				</vlayout>
                <spreadsheet id="ss" hflex="1" showToolbar="true" showFormulabar="true" showSheetbar="true"
							 showContextMenu="true" vflex="1"/>
			</hlayout>
		</vlayout>

		<script id="confirmMsgWorkaround"><![CDATA[
			(function(){
				var fn = 'onunload',
					orgFunc2 = window[fn];
				window[fn] = function (e) {
					zk.unloading = true;
					if(orgFunc2)
						orgFunc2.apply(this, arguments);
				    var bRmDesktop = !zk.opera && !zk.keepDesktop;
					if (bRmDesktop || zk.pfmeter) {
						try {
							var dts = zk.Desktop.all;
							for (var dtid in dts) {
								zAu._rmDesktop(dts[dtid], !bRmDesktop);
							}
						} catch (e) { //silent
						}
					}
				};
			})();
		]]></script>
		<script id="gaScript" ><![CDATA[
			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new
			Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
			})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
	
			ga('create', 'UA-85391072-1', 'auto');
			ga('require', 'displayfeatures');
			ga('send', 'pageview', {
				'page': location.pathname + location.search  + location.hash
			});
		]]></script>
	    <popup id="usersPop" width="115px">
            <html id="usersPopContent">
            </html>
        </popup>
	</window>
</zk>